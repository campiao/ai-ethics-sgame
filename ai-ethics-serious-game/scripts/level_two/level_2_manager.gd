extends Node

@onready var answer_label: Label = $UI_Dialog/AnswerLabel
@onready var question_label: Label = $UI_Dialog/QuestionLabel
@onready var progress_label: Label = $ProgressLabel

# Background
@onready var background_image: TextureRect = $UI_Dialog/BackgroundImage
@onready var dialog_bg_image := preload("res://assets/sprites/backgrounds/background_level2_dialog.png")
@onready var main_bg_image := preload("res://assets/sprites/backgrounds/background.png")


# Entity nodes
@onready var entity_sprite: AnimatedSprite2D = $UI_Dialog/EntitySprite
@onready var title_entity_label: Label = $UI_Dialog/TitleEntityLabel
# Boss entity
@onready var boss_entity: EntityType = $BossEntity

# Buttons
@onready var ok_boss_button: TextureButton = $UI_Dialog/OkBossButton

@onready var main_level = $UI_Images

# Selectable images
@onready var image_right: Control = $UI_Images/ImageRight
@onready var image_left: Control = $UI_Images/ImageLeft

@onready var image_pairs: Node2D = $ImagePairs

# Examine Screen
@onready var examine_screen: Control = $ExamineScreen

@onready var post_level_screen: Control = $PostLevelScreen

@onready var pairs : Array[Node] = image_pairs.get_children()

# Flow control
var is_entity_visible := false
# Text animation speed
var text_update_speed := 2.0

var possible_image_pairs := range(0,4)
var is_left_image_ai := false

var current_image_id := -1

var score := -1
var num_total_attempts := -1
var attempts := -1

var level_2_transition_dialogue = [
	"You’ll now access files and images generated by AI.",
	"Your mission is clear: determine what’s real and what’s been manipulated.",
	"Use your judgment; what you see may not be what it seems.",
	"Blind trust can be the greatest lie.",
	"Level 2 begins now.",
	" "
]

var is_audio_playing := false

func _ready() -> void:
	boss_entity.text = level_2_transition_dialogue
	answer_label.visible_ratio = 0.0
	question_label.visible_ratio = 0.0
	main_level.visible = false
	progress_label.visible = false
	examine_screen.visible = false
	score = 0
	num_total_attempts = 0
	attempts = 0
	
	show_tutorial()
	
func _process(_delta: float) -> void:
	if boss_entity.over:
		return
	else:
		if question_label.visible_ratio < 1.0:
			if not is_audio_playing:
				$SFX/RobotTalk.play()
				is_audio_playing = true
			question_label.visible_ratio += \
			1.0/question_label.text.length()/text_update_speed
		elif answer_label.visible_ratio < 1.0:
			answer_label.visible_ratio += \
			1.0/answer_label.text.length()/text_update_speed
		else:
			if is_audio_playing:
				$SFX/RobotTalk.stop()
				is_audio_playing = false

func set_up_images() -> void:
	var images_passed = len(pairs)-len(possible_image_pairs)
	progress_label.text = "Progress: "+str(images_passed)+"/"+str(len(pairs))
	
	# NOTE: Level ends here 
	if possible_image_pairs.is_empty():
		post_level_screen.set_stats_results(score,
											len(pairs))
		post_level_screen.show()
		Global.level_one_complete = true;
		#is_level_over = true
		return
		
	var image_pair = possible_image_pairs.pick_random()
	var first_pair = pairs[image_pair]
	
	possible_image_pairs.remove_at(possible_image_pairs.find(image_pair))

	var rect_left :TextureRect = image_left.get_child(0)
	var rect_right :TextureRect = image_right.get_child(0)
	
	is_left_image_ai = range(0,2).pick_random()
	print(is_left_image_ai)
	
	if is_left_image_ai:
		rect_left.texture = first_pair.get_child(1).texture
		rect_right.texture = first_pair.get_child(0).texture
	else:
		rect_left.texture = first_pair.get_child(0).texture
		rect_right.texture = first_pair.get_child(1).texture
	
	current_image_id = image_pair
	
	

func _on_ok_boss_button_pressed() -> void:
	base_button_logic();
	$SFX/ClickSound.play()
	boss_entity.is_it_over(answer_label);
	if boss_entity.over:
		advance_level()
		
func base_button_logic() -> void:
	answer_label.visible_ratio = 0.0
	question_label.visible_ratio = 0.0
	

func advance_level() -> void:
	if is_audio_playing:
		$SFX/RobotTalk.stop()
		is_audio_playing = false
	main_level.visible = true
	progress_label.visible = true
	set_up_images()
	
func show_tutorial() -> void:
	setup_entity(boss_entity)
	
func setup_entity(entity_data: EntityType) -> void:
	# Display entity data
	entity_sprite.sprite_frames = entity_data.get_child(0).sprite_frames
	entity_sprite.play("default")
	print(entity_data.answer_text);
	answer_label.text = entity_data.answer_text
	question_label.text = entity_data.question_text
	title_entity_label.text = entity_data.entity_name
	# Mark entity visible to prevent changing displayed data
	is_entity_visible = true

var is_image_clicked := false

func _on_image_gui_input(event: InputEvent, is_left_image: bool) -> void:
	if is_image_clicked:
		is_image_clicked = false
		return
	if event.is_action("left_mouse_btn_clicked"):
		print("clicked on the image!")
		$SFX/ClickSound.play()
		is_image_clicked = true
		if (is_left_image and is_left_image_ai) or (not is_left_image and not is_left_image_ai):
			advance_to_examine_screen()
		else:
			clicked_on_wrong_image()

func clicked_on_wrong_image() -> void:
	boss_entity.text = ["That was a real image taken by a real person in the real world.",
	"Look out for common signs of AI genereated images.",
	"Usually, the lighting might seem really strange.",
	"Sometimes people have extra fingers.",
	"I know you got it this time."]
	boss_entity.over = false
	answer_label.visible_ratio = 0.0
	question_label.visible_ratio = 0.0
	boss_entity.is_it_over(answer_label)
	setup_entity(boss_entity)
	progress_label.visible = true
	advance_to_boss_screen()
	pass
	
func advance_to_boss_screen() -> void:
	main_level.visible = false
	

func advance_to_examine_screen() -> void:
	examine_screen.visible = true
	$AI_Images.visible = true
	var images := $AI_Images.get_children()
	for image in images:
		image.visible = false
	images[current_image_id].visible = true
	
	var poi_count := len(images[current_image_id].get_children())
	progress_label.text = "Attempts: 0/"+str(poi_count)
	num_total_attempts = poi_count

var is_poi_clickec := false
var is_ai_image_clicked := false
# Executed when the user clicks on the ai image on the examine screen
func _on_ai_image_missed_feature(event: InputEvent) -> void:
	if is_poi_clickec:
		return
	if is_ai_image_clicked:
		is_ai_image_clicked = false
		return
	if event.is_action("left_mouse_btn_clicked"):
		basic_click_logic()
		is_ai_image_clicked = true
		advance_from_examine_to_images()

func advance_from_examine_to_images() -> void:
	$UI_Images.visible = true
	examine_screen.visible = false
	$AI_Images.visible = false
	
	is_ai_image_clicked = false
	set_up_images()

# Executed when a poi is clicked in the examine screen
func _on_poi_clicked(event: InputEvent) -> void:
	if is_poi_clickec:
		is_poi_clickec = false
		return
	if event.is_action("left_mouse_btn_clicked"):
		basic_click_logic()
		score += 1
		
		is_poi_clickec = true
		if attempts >= num_total_attempts:
			attempts = 0
			advance_from_examine_to_images()
	
func basic_click_logic() -> void:
	attempts += 1
	progress_label.text = "Attempts: "+str(attempts)+"/"+str(num_total_attempts)
